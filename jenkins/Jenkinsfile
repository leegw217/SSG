// 젠킨스 파이프라인 플러그인을 호출하기 위한 블록
pipeline {
// 파이프라인을 실행하고 싶은 위치 정의
	agent none
	// gitlab의 소스를 jenkins 디렉토리로 내려받을 시
	// skipDefaultCheckout(true)일 경우 내려받는 프로세스 skip
	// skipDefaultCheckout(false)일 경우 gitlab 소스 체크
	options { skipDefaultCheckout(false) }
	// stage의 모음
	stages {
		// 실제 작업이 수행되는 블록
		// 해당 stage 명으로 jenkins 화면에 표시된다
		stage('Build and Test') {
			// docker image에 명시된 image를 활용하여 steps 수행
			//agent {
			//	docker {
			//		image 'maven:3-alpine'
			//		args '-v /root/.m2:/root/.m2'
			//	}
			//}
			//options { skipDefaultCheckout(false) }
			agent any
			steps {
				//sh 'mvn -B -DskipTests -f ~i/home/ubuntu/s04p31d101/backend/SSG/pom.xml clean package'
				//sh 'mvn -B -f ./backend/SSG/ clean package'
				sh 'docker build -t frontend_image ./frontend_admin'
				sh 'docker build -t backend_image ./backend/SSG'
			}
		}
		//stage('Docker build') {
		//	agent any
		//	steps {
		//		// sh 'docker build -t <front-image-name>:latest <front dockerfile path>'
		//		sh 'docker build -t backend_image:latest ./backend/SSG'
		//	}
		//}
		stage('Docker Container rm') {
			agent any
			steps {
				sh 'docker ps -f name=frontend_image -q | xargs --no-run-if-empty \
				docker container stop'
				sh 'docker ps -f name=backend_image -q | xargs --no-run-if-empty \
				docker container stop'
				//sh 'docker ps -f name=mysql_db -q | xargs --no-run-if-empty \
				//docker container stop'
				
				sh 'docker container ls -a name=frontend_image -q | xargs -r docker \
				container rm'
				sh 'docker container ls -a name=backend_image -q | xargs -r docker \
				container rm'
				//sh 'docker container ls -a name=mysql_db -q | xargs -r docker \
				//container rm'
				
				sh 'docker ps -a -f "status=created" -f "status=exited" -q | xargs \
				-r docker container rm'
				sh 'docker images -f "dangling=true" -q | xargs -r docker rmi'
			}
		}
		stage('Docker run') {
			agent any
			steps {
				// 현재 동작중인 컨테이너 중 <front-image-name>의 이름을 가진
				// 컨테이너를 stop 한다
				// sh 'docker ps -f name=<front-image-name> -q \
				// | xargs --no-run-if-empty docker container stop'
				// 현재 동작중인 컨테이너 중 <back-image-name>의 이름을 가진
				// 컨테이너를 stop 한다
				//sh 'docker ps -f name=backend_image -q \
				//| xargs --no-run-if-empty docker container stop'
				// <front-image-name>의 이름을 가진 컨테이너를 삭제한다.
				// sh 'docker container ls -a -f name=<front-image-name> -q \
				// | xargs -r docker container rm'
				// <back-image-name>의 이름을 가진 컨테이너를 삭제한다.
				//sh 'docker container ls -a -f name=backend_image -q \
				//| xargs -r docker container rm'
				// docker image build 시 기존에 존재하던 이미지는
				// dangling 상태가 되기 때문에 이미지를 일괄 삭제
				//sh 'docker images -f "dangling=true" -q \
				//| xargs -r docker rmi'
				// docker container 실행
				// sh 'docker run -d --name <front-image-name> -p 80:80 <front-image-name>:latest'
				sh 'docker run -d --name frontend_image -p 80:80 -p 443:443 --network ServerToDB frontend_image:latest'
				sh 'docker run -d --name backend_image -p 9000:9000 --network ServerToDB backend_image:latest'
				//sh 'docker run --detach --env MYSQL_ROOT_PASSWORD="root" \
				//--env MYSQL_USER="ssafy" \
				//--env MYSQL_PASSWORD="ssafy" \
				//--env MYSQL_DATABASE="ssg" \
				//--name "mysql_db" \
				//--publish 3306:3306 --network ServerToDB mysql'
				//sh 'docker run -d --name backend_image -v /volumes/back_home/profile:\
				///volumes/profile backend_image -p 9000'
			}
		}
	}
}
